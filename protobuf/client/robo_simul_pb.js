// source: robo_simul.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.kr.ac.uos.ai.mcmonitor.Changeness', null, global);
goog.exportSymbol('proto.kr.ac.uos.ai.mcmonitor.Environment', null, global);
goog.exportSymbol('proto.kr.ac.uos.ai.mcmonitor.EventGenerate', null, global);
goog.exportSymbol('proto.kr.ac.uos.ai.mcmonitor.Property', null, global);
goog.exportSymbol('proto.kr.ac.uos.ai.mcmonitor.SimulationCommand', null, global);
goog.exportSymbol('proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.Command', null, global);
goog.exportSymbol('proto.kr.ac.uos.ai.mcmonitor.Vector2', null, global);
goog.exportSymbol('proto.kr.ac.uos.ai.mcmonitor.VirtualObject', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kr.ac.uos.ai.mcmonitor.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kr.ac.uos.ai.mcmonitor.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kr.ac.uos.ai.mcmonitor.Property.displayName = 'proto.kr.ac.uos.ai.mcmonitor.Property';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kr.ac.uos.ai.mcmonitor.Vector2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kr.ac.uos.ai.mcmonitor.Vector2.displayName = 'proto.kr.ac.uos.ai.mcmonitor.Vector2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kr.ac.uos.ai.mcmonitor.Changeness, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kr.ac.uos.ai.mcmonitor.Changeness.displayName = 'proto.kr.ac.uos.ai.mcmonitor.Changeness';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kr.ac.uos.ai.mcmonitor.Environment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kr.ac.uos.ai.mcmonitor.Environment.repeatedFields_, null);
};
goog.inherits(proto.kr.ac.uos.ai.mcmonitor.Environment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kr.ac.uos.ai.mcmonitor.Environment.displayName = 'proto.kr.ac.uos.ai.mcmonitor.Environment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kr.ac.uos.ai.mcmonitor.VirtualObject.repeatedFields_, null);
};
goog.inherits(proto.kr.ac.uos.ai.mcmonitor.VirtualObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kr.ac.uos.ai.mcmonitor.VirtualObject.displayName = 'proto.kr.ac.uos.ai.mcmonitor.VirtualObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kr.ac.uos.ai.mcmonitor.SimulationCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.displayName = 'proto.kr.ac.uos.ai.mcmonitor.SimulationCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kr.ac.uos.ai.mcmonitor.EventGenerate.repeatedFields_, null);
};
goog.inherits(proto.kr.ac.uos.ai.mcmonitor.EventGenerate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kr.ac.uos.ai.mcmonitor.EventGenerate.displayName = 'proto.kr.ac.uos.ai.mcmonitor.EventGenerate';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kr.ac.uos.ai.mcmonitor.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.kr.ac.uos.ai.mcmonitor.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Property}
 */
proto.kr.ac.uos.ai.mcmonitor.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kr.ac.uos.ai.mcmonitor.Property;
  return proto.kr.ac.uos.ai.mcmonitor.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Property}
 */
proto.kr.ac.uos.ai.mcmonitor.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kr.ac.uos.ai.mcmonitor.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kr.ac.uos.ai.mcmonitor.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.kr.ac.uos.ai.mcmonitor.Property.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Property} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.Property.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.kr.ac.uos.ai.mcmonitor.Property.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Property} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.Property.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2.prototype.toObject = function(opt_includeInstance) {
  return proto.kr.ac.uos.ai.mcmonitor.Vector2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Vector2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Vector2}
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kr.ac.uos.ai.mcmonitor.Vector2;
  return proto.kr.ac.uos.ai.mcmonitor.Vector2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Vector2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Vector2}
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kr.ac.uos.ai.mcmonitor.Vector2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Vector2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Vector2} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Vector2} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.Vector2.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.prototype.toObject = function(opt_includeInstance) {
  return proto.kr.ac.uos.ai.mcmonitor.Changeness.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Changeness} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    location: (f = msg.getLocation()) && proto.kr.ac.uos.ai.mcmonitor.Vector2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Changeness}
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kr.ac.uos.ai.mcmonitor.Changeness;
  return proto.kr.ac.uos.ai.mcmonitor.Changeness.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Changeness} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Changeness}
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = new proto.kr.ac.uos.ai.mcmonitor.Vector2;
      reader.readMessage(value,proto.kr.ac.uos.ai.mcmonitor.Vector2.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kr.ac.uos.ai.mcmonitor.Changeness.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Changeness} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.kr.ac.uos.ai.mcmonitor.Vector2.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Changeness} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Changeness} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Vector2 location = 3;
 * @return {?proto.kr.ac.uos.ai.mcmonitor.Vector2}
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.prototype.getLocation = function() {
  return /** @type{?proto.kr.ac.uos.ai.mcmonitor.Vector2} */ (
    jspb.Message.getWrapperField(this, proto.kr.ac.uos.ai.mcmonitor.Vector2, 3));
};


/**
 * @param {?proto.kr.ac.uos.ai.mcmonitor.Vector2|undefined} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Changeness} returns this
*/
proto.kr.ac.uos.ai.mcmonitor.Changeness.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Changeness} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kr.ac.uos.ai.mcmonitor.Changeness.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kr.ac.uos.ai.mcmonitor.Environment.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kr.ac.uos.ai.mcmonitor.Environment.prototype.toObject = function(opt_includeInstance) {
  return proto.kr.ac.uos.ai.mcmonitor.Environment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Environment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.Environment.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    proto.kr.ac.uos.ai.mcmonitor.VirtualObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Environment}
 */
proto.kr.ac.uos.ai.mcmonitor.Environment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kr.ac.uos.ai.mcmonitor.Environment;
  return proto.kr.ac.uos.ai.mcmonitor.Environment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Environment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Environment}
 */
proto.kr.ac.uos.ai.mcmonitor.Environment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kr.ac.uos.ai.mcmonitor.VirtualObject;
      reader.readMessage(value,proto.kr.ac.uos.ai.mcmonitor.VirtualObject.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kr.ac.uos.ai.mcmonitor.Environment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kr.ac.uos.ai.mcmonitor.Environment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Environment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.Environment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kr.ac.uos.ai.mcmonitor.VirtualObject.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VirtualObject objects = 1;
 * @return {!Array<!proto.kr.ac.uos.ai.mcmonitor.VirtualObject>}
 */
proto.kr.ac.uos.ai.mcmonitor.Environment.prototype.getObjectsList = function() {
  return /** @type{!Array<!proto.kr.ac.uos.ai.mcmonitor.VirtualObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kr.ac.uos.ai.mcmonitor.VirtualObject, 1));
};


/**
 * @param {!Array<!proto.kr.ac.uos.ai.mcmonitor.VirtualObject>} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Environment} returns this
*/
proto.kr.ac.uos.ai.mcmonitor.Environment.prototype.setObjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject}
 */
proto.kr.ac.uos.ai.mcmonitor.Environment.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kr.ac.uos.ai.mcmonitor.VirtualObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Environment} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.Environment.prototype.clearObjectsList = function() {
  return this.setObjectsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.toObject = function(opt_includeInstance) {
  return proto.kr.ac.uos.ai.mcmonitor.VirtualObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    position: (f = msg.getPosition()) && proto.kr.ac.uos.ai.mcmonitor.Vector2.toObject(includeInstance, f),
    size: (f = msg.getSize()) && proto.kr.ac.uos.ai.mcmonitor.Vector2.toObject(includeInstance, f),
    shape: jspb.Message.getFieldWithDefault(msg, 5, ""),
    orientationangle: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.kr.ac.uos.ai.mcmonitor.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kr.ac.uos.ai.mcmonitor.VirtualObject;
  return proto.kr.ac.uos.ai.mcmonitor.VirtualObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.kr.ac.uos.ai.mcmonitor.Vector2;
      reader.readMessage(value,proto.kr.ac.uos.ai.mcmonitor.Vector2.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = new proto.kr.ac.uos.ai.mcmonitor.Vector2;
      reader.readMessage(value,proto.kr.ac.uos.ai.mcmonitor.Vector2.deserializeBinaryFromReader);
      msg.setSize(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setShape(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrientationangle(value);
      break;
    case 7:
      var value = new proto.kr.ac.uos.ai.mcmonitor.Property;
      reader.readMessage(value,proto.kr.ac.uos.ai.mcmonitor.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kr.ac.uos.ai.mcmonitor.VirtualObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.kr.ac.uos.ai.mcmonitor.Vector2.serializeBinaryToWriter
    );
  }
  f = message.getSize();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.kr.ac.uos.ai.mcmonitor.Vector2.serializeBinaryToWriter
    );
  }
  f = message.getShape();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrientationangle();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.kr.ac.uos.ai.mcmonitor.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Vector2 position = 3;
 * @return {?proto.kr.ac.uos.ai.mcmonitor.Vector2}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.getPosition = function() {
  return /** @type{?proto.kr.ac.uos.ai.mcmonitor.Vector2} */ (
    jspb.Message.getWrapperField(this, proto.kr.ac.uos.ai.mcmonitor.Vector2, 3));
};


/**
 * @param {?proto.kr.ac.uos.ai.mcmonitor.Vector2|undefined} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} returns this
*/
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Vector2 size = 4;
 * @return {?proto.kr.ac.uos.ai.mcmonitor.Vector2}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.getSize = function() {
  return /** @type{?proto.kr.ac.uos.ai.mcmonitor.Vector2} */ (
    jspb.Message.getWrapperField(this, proto.kr.ac.uos.ai.mcmonitor.Vector2, 4));
};


/**
 * @param {?proto.kr.ac.uos.ai.mcmonitor.Vector2|undefined} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} returns this
*/
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.setSize = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.clearSize = function() {
  return this.setSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.hasSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string shape = 5;
 * @return {string}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.getShape = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.setShape = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional float orientationAngle = 6;
 * @return {number}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.getOrientationangle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.setOrientationangle = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * repeated Property properties = 7;
 * @return {!Array<!proto.kr.ac.uos.ai.mcmonitor.Property>}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.kr.ac.uos.ai.mcmonitor.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kr.ac.uos.ai.mcmonitor.Property, 7));
};


/**
 * @param {!Array<!proto.kr.ac.uos.ai.mcmonitor.Property>} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} returns this
*/
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.setPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Property}
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.kr.ac.uos.ai.mcmonitor.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.VirtualObject} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.VirtualObject.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, 0),
    environmentname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand}
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kr.ac.uos.ai.mcmonitor.SimulationCommand;
  return proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand}
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.Command} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEnvironmentname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.Command = {
  CREATE: 0,
  START: 1,
  RESUME: 2,
  PAUSE: 3,
  STOP: 4,
  DELETE: 5
};

/**
 * optional Command command = 1;
 * @return {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.Command}
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.prototype.getCommand = function() {
  return /** @type {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.Command} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.Command} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.prototype.setCommand = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string environmentName = 2;
 * @return {string}
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.prototype.getEnvironmentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.SimulationCommand} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.SimulationCommand.prototype.setEnvironmentname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.prototype.toObject = function(opt_includeInstance) {
  return proto.kr.ac.uos.ai.mcmonitor.EventGenerate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kr.ac.uos.ai.mcmonitor.EventGenerate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.kr.ac.uos.ai.mcmonitor.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.EventGenerate}
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kr.ac.uos.ai.mcmonitor.EventGenerate;
  return proto.kr.ac.uos.ai.mcmonitor.EventGenerate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.EventGenerate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.EventGenerate}
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.kr.ac.uos.ai.mcmonitor.Property;
      reader.readMessage(value,proto.kr.ac.uos.ai.mcmonitor.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kr.ac.uos.ai.mcmonitor.EventGenerate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kr.ac.uos.ai.mcmonitor.EventGenerate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.kr.ac.uos.ai.mcmonitor.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.EventGenerate} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Property properties = 2;
 * @return {!Array<!proto.kr.ac.uos.ai.mcmonitor.Property>}
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.kr.ac.uos.ai.mcmonitor.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kr.ac.uos.ai.mcmonitor.Property, 2));
};


/**
 * @param {!Array<!proto.kr.ac.uos.ai.mcmonitor.Property>} value
 * @return {!proto.kr.ac.uos.ai.mcmonitor.EventGenerate} returns this
*/
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.prototype.setPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.kr.ac.uos.ai.mcmonitor.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kr.ac.uos.ai.mcmonitor.Property}
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.kr.ac.uos.ai.mcmonitor.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kr.ac.uos.ai.mcmonitor.EventGenerate} returns this
 */
proto.kr.ac.uos.ai.mcmonitor.EventGenerate.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};


goog.object.extend(exports, proto.kr.ac.uos.ai.mcmonitor);
